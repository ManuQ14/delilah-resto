openapi: 3.0.1
info:
  title: Delilah Resto Api
  description: Tercer proyecto de acamica. API de pedidos. Manuel Quintana
  contact:
    email: manuquintanafotos@gmail.com
  version: 1.0.0
servers:
  - url: 'http://localhost:3000/api'
tags:
  - name: usuarios
    description: Usuarios del sistema
paths:
  /usuarios:
    post:
      tags:
        - usuarios
      summary: Endpoint para crear usuario (previo login con user Admin)
      requestBody:
        description: Objeto para crear usuario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usuarios'
          application/xml:
            schema:
              $ref: '#/components/schemas/usuarios'
        required: true
      responses:
        '201':
          description: Usuario creado
          content: {}
        '400':
          description: Invalid input
          content: {}
        '401':
          description: Username or password invalid
          content: {}
        '500':
          description: Error del servidor
          content: {}
      security:
        - bearerAuth: []
  /usuarios/login:
    get:
      tags:
        - usuarios
      summary: Endpoint para login de user
      description: endpoint que se usa para loguearse
      responses:
        '200':
          description: Objeto para login de user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuariosForLogin'
        '400':
          description: Invalid input
          content: {}
        '401':
          description: Username or password invalid
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
  /productos:
    post:
      tags:
        - productos
      summary: Endpoint para crear productos con user Admin
      requestBody:
        description: Objeto de producto para crearlo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProduct'
          application/xml:
            schema:
              $ref: '#/components/schemas/createProduct'
        required: true
      responses:
        '201':
          description: Producto creado con éxito
          content: {}
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - productos
      summary: Endpoint que obtiene todos los productos
      responses:
        '200':
          description: Ok
          content: {}
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
  '/productos/{id}':
    get:
      tags:
        - productos
      summary: Endpoint para traer productos por id
      description: Objeto necesario para traer producto por id
      parameters:
        - name: id
          in: path
          description: Id del producto
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getById'
            application/xml:
              schema:
                $ref: '#/components/schemas/getById'
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
    put:
      tags:
        - productos
      summary: Endpoint para actualizar producto específico(Sólo Admin)
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Se modificó correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateById'
            application/xml:
              schema:
                $ref: '#/components/schemas/updateById'
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error
          content: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - productos
      summary: Endpoint para eliminar producto (Sólo Admin)
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error
          content: {}
      security:
        - bearerAuth: []
  /pedidos:
    post:
      tags:
        - pedidos
      summary: Endpoint para crear pedidos
      requestBody:
        description: Objeto para crear pedidos
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPedidos'
          application/xml:
            schema:
              $ref: '#/components/schemas/createPedidos'
        required: true
      responses:
        '201':
          description: Pedido creado con éxito
          content: {}
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
    get:
      tags:
        - pedidos
      summary: Endpoint para obtener todos los pedidos (Sólo Admin)
      responses:
        '200':
          description: Ok
          content: {}
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
  '/pedidos/{id}':
    get:
      tags:
        - pedidos
      summary: Endpoint para obtener un pedido específico por Id
      description: Obtenemos el pedido específico
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pedidosGetById'
            application/xml:
              schema:
                $ref: '#/components/schemas/pedidosGetById'
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error
          content: {}
      security:
        - bearerAuth: []
    put:
      tags:
        - pedidos
      summary: Endpoint para modificar pedido por Id
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Se modificó correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putPedidosById'
            application/xml:
              schema:
                $ref: '#/components/schemas/putPedidosById'
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error de servidor
          content: {}
      security:
        - bearerAuth: []
    delete:
      tags:
        - pedidos
      summary: This endpoint allows admin users to delete orders
      parameters:
        - name: id
          in: path
          description: Id of the product
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid input
          content: {}
        '500':
          description: Error
          content: {}
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    usuarios:
      type: object
      required:
        - nombre
        - apellido
        - usuario
        - correoElectronico
        - telefono
        - direccionDeEnvio
        - clave
      properties:
        nombre:
          type: string
          example: Manuel
        apellido:
          type: string
          example: Quintana
        usuario:
          type: string
          example: admin
        correoElectronico:
          type: string
          example: manuquintanafotos@gmail.com
        telefono:
          type: string
          example: 5555 5555
        direccionDeEnvio:
          type: string
          example: Calle falsa 123
        clave:
          type: string
          example: acamica1234
      xml:
        name: usuarios
    usuariosForLogin:
      type: object
      required:
        - usuario
        - clave
      properties:
        usuario:
          type: string
          example: admin
        clave:
          type: string
          example: acamica1234
      xml:
        name: usuariosForLogin
    createProduct:
      type: object
      required:
        - nombre
        - precio
        - descripcion
      properties:
        nombre:
          type: string
          example: Xela Burguer
        precio:
          type: number
          example: '850'
        descripcion:
          type: string
          example: Hamburguesa con cheddar
      xml:
        name: createProduct
    getById:
      type: object
      properties:
        id:
          type: integer
          example: 1
          format: int64
        nombre:
          type: string
          example: Xela Burguer
        precio:
          type: number
          example: '850'
        descripcion:
          type: string
          example: Hamburguesa con cheddar
    updateById:
      type: object
      properties:
        id:
          type: integer
          example: 1
          format: int64
        nombre:
          type: string
          example: Xela Burguer
        precio:
          type: number
          example: '1050'
        descripcion:
          type: string
          example: Hamburguesa con cheddar
    createPedidos:
      type: object
      required:
        - total
        - formaDePago
        - direccion
      properties:
        total:
          type: number
          example: $1500
        formaDePago:
          type: string
          example: Débito
        direccion:
          type: string
          example: Calle falsa 123
        productos:
          type: string
          example:
            - id: 1
            - id: 2
            - id: 3
    pedidosGetById:
      type: object
      properties:
        id:
          type: integer
          example: 1
          format: int64
        estado:
          type: string
          example: En Proceso
        total:
          type: number
          example: '1500'
        formaDePago:
          type: string
          example: Débito
        direccion:
          type: string
          example: Calle Falsa 123
    putPedidosById:
      type: object
      properties:
        id:
          type: integer
          example: 1
          format: int64
        estado:
          type: string
          example: Procesado
        total:
          type: number
          example: '1200'
        formaDePago:
          type: string
          example: Tarjeta de Credito
        direccion:
          type: string
          example: Calle Falsa 124
